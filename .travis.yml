language: cpp
dist: trusty
sudo: required

os:
  - linux
  - osx

compiler:
  - gcc
  - clang

matrix:
  allow_failures:
  - os: osx

env:
  # avoid ALSA errors
  - SDL_AUDIODRIVER=dummy

before_install:
  #ubuntu dependencies
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo sh -c 'echo "deb http://www.icub.org/ubuntu precise contrib/science" > /etc/apt/sources.list.d/icub.list'; fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo add-apt-repository -y ppa:kubuntu-ppa/backports; fi 
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo add-apt-repository -y ppa:robotology/ppa; fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo apt-get update; fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo apt-get install cmake; fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo apt-get --force-yes install icub-common libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev libzbar-dev; fi

  #OS X dependencies
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then export XQUARTZ_VERSION=2.7.6;fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then curl -L -O http://xquartz.macosforge.org/downloads/SL/XQuartz-${XQUARTZ_VERSION}.dmg; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then hdiutil mount XQuartz-${XQUARTZ_VERSION}.dmg; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then sudo installer -store -pkg /Volumes/XQuartz-${XQUARTZ_VERSION}/XQuartz.pkg -target / ; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then hdiutil unmount /Volumes/XQuartz-${XQUARTZ_VERSION}; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then brew install `brew deps --1 yarp | sed -e ':a' -e 'N' -e '$!ba' -e 's/\n/ /g'`; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then brew install cmake goocanvas  sdl sdl_image sdl_mixer sdl_ttf gfortran; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then brew install ode --enable-double-precision; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then brew tap homebrew/science; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then brew install opencv; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then brew install --with-qt3support qt; fi
  #use the same set of cmake options used in the dashboard build
  # - source ./admin/scripts/generate-cmake-options.sh # no special cmake options for now.

install:
  #install yarp from master
  - cd
  - git clone --depth=1 --branch=master https://github.com/robotology/yarp
  - cd yarp
  - mkdir build
  - cd build
  - cmake ../ -DCREATE_OPTIONAL_CARRIERS:BOOL=ON -DENABLE_yarpcar_mjpeg:BOOL=ON
  - make -j2
  - sudo make install

  # see http://gronlier.fr/blog/2015/01/adding-code-coverage-to-your-c-project/
  - cd
  - if [ "$CXX" = "g++" ]; then wget http://ftp.de.debian.org/debian/pool/main/l/lcov/lcov_1.11.orig.tar.gz; fi
  - if [ "$CXX" = "g++" ]; then tar xf lcov_1.11.orig.tar.gz; fi
  - if [ "$CXX" = "g++" ]; then sudo make -C lcov-1.11/ install; fi
  - if [ "$CXX" = "g++" ]; then gem install coveralls-lcov; fi

before_script:
  - cd $TRAVIS_BUILD_DIR
  - mkdir build
  - cd build 
  - cmake ../ ${CMAKE_OPTIONS}
  - cmake --build .
  - sudo make install
  # SDL stuff
  - "export DISPLAY=:99.0"
  - "sh -e /etc/init.d/xvfb start"
  - sleep 3 # give xvfb some time to start

script:
  - bin/testDeadState
  - bin/testFSMBuilder
  - bin/testFSM
  - bin/testGameState
  - bin/testInitState
  - bin/testMentalMap
  - bin/testMockAudioManager
  - bin/testMockInputManager
  - bin/testMockRobotManager
  - bin/testProcessorImageEventListener
  - bin/testYarpNetworkManager
  - bin/testSDLAudioManager
  - bin/testRobotDevastation

after_success:
  #  - cd $TRAVIS_BUILD_DIR
  # capture coverage info
  - if [ "$CXX" = "g++" ]; then lcov --directory . --capture --output-file coverage.info; fi
  # filter out system and test code
  - if [ "$CXX" = "g++" ]; then lcov --remove coverage.info  '/usr/*' 'test/*' --output-file coverage.info; fi
  # debug before upload
  - if [ "$CXX" = "g++" ]; then lcov --list coverage.info; fi
  # uploads to coveralls
  #- if [ "$CXX" = "g++" ]; then coveralls-lcov --source-encoding=ISO-8859-1 --repo-token InWqFy6VWMrEUzr2Rn8XV0cGqv3wXWo2d coverage.info; fi
  - if [ "$CXX" = "g++" ]; then coveralls-lcov --source-encoding=ISO-8859-1 coverage.info; fi

deploy:
  provider: releases
  api_key:
    secure: ZYIom8JMgB5Nl97parzXJsG3IeQFXYsXOOOvQef3z4BUAJsx93Fb6my9/JdFbs/YBt6MN8Ft1xXvRt5RjEQaCGdONcx6C6jS991ADUIxRe+CNxiEZdqSk3zVd9ayLXtxzrMBZZY3Th82ezNFRtDUo2J3oOZ9gJXcunVojyYv7cs545+CvIzpSjuttMI4/gssfDlc87BC3QhXqD+urHrofl5qvs3SRBZzjNa3C8BpecZoCC4JXo/oGHfZy4u4RfCFoPGQbxy56+dYM1KyfmJtHhS+zswKa+SwFfm7rrh7uNg74lm9S0JcyQKamSQjesXuZYD54wg7WbIPN+2aI7DicIX+8qehvmyaCiJQF9OlX53Q8YwsrgyKUxJDJDxstoBqVFjz9TCSZxy9LjnhcQjjQr3O7ROvaM6JoFRnTcqOvFG23qIsii3SQkaTx+IZi376LaWahpkdYD3cmSrP4v9IPzQKbzV6tYJOeIw4EMb+hmO58ukQgnQwN75MKUnFXbHglVXe1Fh9a2ZGtX6LTTLu68x9eaCTIHBf5iFpUR2T2sHqoNFJ3DjUy8f8goUb8oUJ2QdA80VCHfmus7cVy34S1fSaPXKVYgzwAPLp51g5FPDR9ME7uXaBF4cbSNFVX2jrA/x0PCAUTRHDbNNt1/FRsCkbRF6YR/+cbMLuKKS1xSs=
  file: bin/robotDevastation
  skip_cleanup: true
  on:
    tags: true
    condition: $CXX = g++
